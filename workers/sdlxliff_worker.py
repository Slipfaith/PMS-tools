# workers/sdlxliff_worker.py

from PySide6.QtCore import QThread, Signal
from pathlib import Path
from typing import List
import logging

logger = logging.getLogger(__name__)


class SdlxliffSplitWorker(QThread):
    """Worker –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è SDLXLIFF —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    
    progress = Signal(int, str)  # –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å–æ–æ–±—â–µ–Ω–∏–µ
    finished = Signal(object)  # ConversionResult
    error = Signal(str)  # –°—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
    log_written = Signal(str)  # –õ–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
    
    def __init__(self, filepath: Path, settings, options):
        super().__init__()
        self.filepath = filepath
        self.settings = settings
        self.options = options
        self.should_stop = False
        
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ SDLXLIFF –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info(f"SDLXLIFF split worker started: {self.filepath.name}")
            self.log_written.emit(f"üöÄ –ù–∞—á–∞—Ç–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {self.filepath.name}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            from core.converters.sdlxliff_converter import SdlxliffConverter
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(progress: int, message: str):
                if not self.should_stop:
                    self.progress.emit(progress, message)
                    if progress % 20 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 20%
                        self.log_written.emit(f"üìä {message} ({progress}%)")
                        
            def should_stop_callback():
                return self.should_stop
                
            self.options.progress_callback = progress_callback
            self.options.should_stop_callback = should_stop_callback
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            converter = SdlxliffConverter()
            result = converter.split_file(self.filepath, self.settings, self.options)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.success:
                stats = result.stats
                self.log_written.emit(
                    f"‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ {stats['parts_count']} —á–∞—Å—Ç–µ–π"
                )
                for output_file in result.output_files:
                    self.log_written.emit(f"   üìÑ {output_file.name}")
            else:
                self.log_written.emit(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {', '.join(result.errors)}")
            
            # –≠–º–∏—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.finished.emit(result)
            
            logger.info(f"SDLXLIFF split worker finished: {self.filepath.name}, success={result.success}")
            
        except Exception as e:
            error_msg = f"SDLXLIFF split worker error: {e}"
            logger.exception(error_msg)
            self.log_written.emit(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.error.emit(str(e))
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
        self.should_stop = True
        logger.info(f"SDLXLIFF split worker stop requested: {self.filepath.name}")


class SdlxliffMergeWorker(QThread):
    """Worker –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è SDLXLIFF —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    
    progress = Signal(int, str)  # –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å–æ–æ–±—â–µ–Ω–∏–µ
    finished = Signal(object)  # ConversionResult
    error = Signal(str)  # –°—Ç—Ä–æ–∫–∞ —Å –æ—à–∏–±–∫–æ–π
    log_written = Signal(str)  # –õ–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
    
    def __init__(self, filepaths: List[Path], settings, options):
        super().__init__()
        self.filepaths = filepaths
        self.settings = settings
        self.options = options
        self.should_stop = False
        
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ SDLXLIFF –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info(f"SDLXLIFF merge worker started: {len(self.filepaths)} files")
            self.log_written.emit(f"üöÄ –ù–∞—á–∞—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ {len(self.filepaths)} —Ñ–∞–π–ª–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            for i, filepath in enumerate(self.filepaths, 1):
                self.log_written.emit(f"   {i}. {filepath.name}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            from core.converters.sdlxliff_converter import SdlxliffConverter
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(progress: int, message: str):
                if not self.should_stop:
                    self.progress.emit(progress, message)
                    if progress % 20 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 20%
                        self.log_written.emit(f"üìä {message} ({progress}%)")
                        
            def should_stop_callback():
                return self.should_stop
                
            self.options.progress_callback = progress_callback
            self.options.should_stop_callback = should_stop_callback
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            converter = SdlxliffConverter()
            result = converter.merge_files(self.filepaths, self.settings, self.options)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.success:
                stats = result.stats
                output_file = result.output_files[0] if result.output_files else None
                self.log_written.emit(
                    f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {output_file.name if output_file else 'unknown'}"
                )
                self.log_written.emit(
                    f"   üìä –í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {stats.get('total_segments', 0)}"
                )
                self.log_written.emit(
                    f"   üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {stats.get('output_size_mb', 0):.1f} MB"
                )
            else:
                self.log_written.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {', '.join(result.errors)}")
            
            # –≠–º–∏—Ç–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.finished.emit(result)
            
            logger.info(f"SDLXLIFF merge worker finished: success={result.success}")
            
        except Exception as e:
            error_msg = f"SDLXLIFF merge worker error: {e}"
            logger.exception(error_msg)
            self.log_written.emit(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.error.emit(str(e))
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        self.should_stop = True
        logger.info("SDLXLIFF merge worker stop requested")