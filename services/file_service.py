# services/file_service.py - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–î–î–ï–†–ñ–ö–û–ô SDLXLIFF

import sqlite3
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Dict, Optional, List
import logging
import re

logger = logging.getLogger(__name__)


class FileService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏. –í—Å—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –∑–¥–µ—Å—å."""

    def __init__(self):
        self.supported_formats = {
            '.sdltm': 'SDL Trados Memory',
            '.xlsx': 'Excel Workbook',
            '.xls': 'Excel Workbook',
            '.tmx': 'TMX Memory',
            '.xml': 'XML/Termbase',
            '.mtf': 'MultiTerm Format',
            '.tbx': 'TBX Termbase',
            '.sdlxliff': 'SDL XLIFF'
        }

    def get_file_info(self, filepath: Path) -> Dict[str, any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è GUI"""
        try:
            info = {
                'name': filepath.name,
                'size_mb': filepath.stat().st_size / (1024 * 1024),
                'format': self.get_format_name(filepath),
                'format_icon': self.get_format_icon(filepath),
                'extra_info': '',
                'is_supported': self.is_supported(filepath)
            }

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            if filepath.suffix.lower() == '.sdltm':
                info['extra_info'] = self._get_sdltm_info(filepath)
            elif filepath.suffix.lower() in ['.xlsx', '.xls']:
                info['extra_info'] = self._get_excel_info(filepath)
            elif filepath.suffix.lower() == '.sdlxliff':
                info['extra_info'] = self._get_sdlxliff_info(filepath)

            return info

        except Exception as e:
            logger.warning(f"Error analyzing file {filepath}: {e}")
            return {
                'name': filepath.name,
                'size_mb': 0,
                'format': 'Unknown',
                'format_icon': 'üìÑ',
                'extra_info': f'–û—à–∏–±–∫–∞: {e}',
                'is_supported': False
            }

    def is_supported(self, filepath: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç"""
        return filepath.suffix.lower() in self.supported_formats

    def get_format_name(self, filepath: Path) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
        suffix = filepath.suffix.lower()
        return self.supported_formats.get(suffix, 'Unknown Format')

    def get_format_icon(self, filepath: Path) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞"""
        suffix = filepath.suffix.lower()
        icons = {
            '.sdltm': 'üóÑÔ∏è',
            '.xlsx': 'üìä',
            '.xls': 'üìä',
            '.tmx': 'üîÑ',
            '.xml': 'üìã',
            '.mtf': 'üìñ',
            '.tbx': 'üìñ',
            '.sdlxliff': '‚úÇÔ∏è'
        }
        return icons.get(suffix, 'üìÑ')

    def detect_files_format(self, filepaths: List[str]) -> tuple[str, List[str]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è drop area"""
        valid_files = []
        detected_formats = set()
        sdlxliff_parts = []

        for filepath in filepaths:
            path = Path(filepath)
            if path.exists() and path.is_file() and self.is_supported(path):
                valid_files.append(filepath)

                # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è SDLXLIFF —á–∞—Å—Ç–µ–π
                if path.suffix.lower() == '.sdlxliff' and self.is_sdlxliff_part(path):
                    sdlxliff_parts.append(path)
                    detected_formats.add("SDL XLIFF —á–∞—Å—Ç–∏")
                else:
                    detected_formats.add(self.get_format_name(path))

        if not valid_files:
            return "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç", []

        # –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Å—Ç–∏ SDLXLIFF, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —á–∞—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if sdlxliff_parts:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏
            parts_groups = {}
            for part_path in sdlxliff_parts:
                part_info = self.get_sdlxliff_part_info(part_path)
                if part_info:
                    base_name = re.sub(r'\.\d+of\d+\.sdlxliff, '', str(part_path))
                    if base_name not in parts_groups:
                        parts_groups[base_name] = {
                            'total': part_info['total'],
                            'found': []
                        }
                    parts_groups[base_name]['found'].append(part_info['part'])

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç—è—Ö
                    parts_info = []
                    for base_name, info in parts_groups.items():
                        found_count = len(info['found'])
                    total_count = info['total']
                    if found_count == total_count:
                        parts_info.append(f"‚úÖ –í—Å–µ {total_count} —á–∞—Å—Ç–µ–π")
                    else:
                        parts_info.append(f"‚ö†Ô∏è {found_count} –∏–∑ {total_count} —á–∞—Å—Ç–µ–π")

                    format_name = f"SDL XLIFF —á–∞—Å—Ç–∏ ({', '.join(parts_info)})"
                    elif len(detected_formats) == 1:
                    format_name = list(detected_formats)[0]
                    else:
                    format_name = f"–°–º–µ—à–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ({len(detected_formats)})"

        return format_name, valid_files

    def auto_detect_languages(self, filepath: Path) -> Optional[Dict[str, str]]:
        """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –∏–∑ SDLTM —Ñ–∞–π–ª–∞"""
        if filepath.suffix.lower() != '.sdltm':
            return None

        try:
            with sqlite3.connect(str(filepath)) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT source_segment, target_segment FROM translation_units LIMIT 10")

                src_lang = "unknown"
                tgt_lang = "unknown"

                for src_xml, tgt_xml in cursor.fetchall():
                    try:
                        # –ü–∞—Ä—Å–∏–º source
                        if src_lang == "unknown":
                            root = ET.fromstring(src_xml)
                            lang_elem = root.find(".//CultureName")
                            if lang_elem is not None and lang_elem.text:
                                src_lang = self._normalize_language(lang_elem.text)

                        # –ü–∞—Ä—Å–∏–º target
                        if tgt_lang == "unknown":
                            root = ET.fromstring(tgt_xml)
                            lang_elem = root.find(".//CultureName")
                            if lang_elem is not None and lang_elem.text:
                                tgt_lang = self._normalize_language(lang_elem.text)

                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–±–∞ —è–∑—ã–∫–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                        if src_lang != "unknown" and tgt_lang != "unknown":
                            break

                    except Exception:
                        continue

                if src_lang != "unknown" or tgt_lang != "unknown":
                    return {"source": src_lang, "target": tgt_lang}

        except Exception as e:
            logger.warning(f"Error detecting languages from {filepath}: {e}")

        return None

    def _get_sdltm_info(self, filepath: Path) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± SDLTM —Ñ–∞–π–ª–µ"""
        try:
            with sqlite3.connect(str(filepath)) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM translation_units")
                count = cursor.fetchone()[0]
                return f"{count:,} —Å–µ–≥–º–µ–Ω—Ç–æ–≤"
        except Exception:
            return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    def _get_excel_info(self, filepath: Path) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± Excel —Ñ–∞–π–ª–µ"""
        try:
            import openpyxl
            wb = openpyxl.load_workbook(str(filepath), read_only=True)

            sheets_count = len(wb.sheetnames)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            total_rows = 0
            for sheet_name in wb.sheetnames:
                sheet = wb[sheet_name]
                if sheet.max_row > 1:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ –ª–∏—Å—Ç—ã
                    total_rows += sheet.max_row - 1  # –ú–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫

            wb.close()

            if total_rows > 0:
                return f"{sheets_count} –ª–∏—Å—Ç–æ–≤, ~{total_rows:,} —Å—Ç—Ä–æ–∫"
            else:
                return f"{sheets_count} –ª–∏—Å—Ç–æ–≤"

        except Exception as e:
            logger.warning(f"Error analyzing Excel file {filepath}: {e}")
            return "–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

    def _get_sdlxliff_info(self, filepath: Path) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SDLXLIFF —Ñ–∞–π–ª–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —á–∞—Å—Ç—å—é
            match = re.search(r'\.(\d+)of(\d+)\.sdlxliff, str(filepath), re.IGNORECASE)
            if match:
                part = match.group(1)
            total = match.group(2)
            return f"–ß–∞—Å—Ç—å {part} –∏–∑ {total}"
            else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            # (—á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)
            try:
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª XML
                with open(filepath, 'rb') as f:
                    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 1KB –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    header = f.read(1024)
                    if b'<xliff' in header or b'trans-unit' in header:
                        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                        file_size_mb = filepath.stat().st_size / (1024 * 1024)
                        estimated_segments = int(file_size_mb * 100)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                        return f"~{estimated_segments:,} —Å–µ–≥–º–µ–Ω—Ç–æ–≤"
                    else:
                        return "–¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
            except:
                return "–¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"

    except Exception as e:
    logger.warning(f"Error analyzing SDLXLIFF file {filepath}: {e}")
    return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"


def is_sdlxliff_part(self, filepath: Path) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —á–∞—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ SDLXLIFF"""
    pattern = r'\.\d+of\d+\.sdlxliff
    return bool(re.search(pattern, str(filepath), re.IGNORECASE))


def get_sdlxliff_part_info(self, filepath: Path) -> Optional[Dict[str, int]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏ SDLXLIFF —Ñ–∞–π–ª–∞"""
    match = re.search(r'\.(\d+)of(\d+)\.sdlxliff, str(filepath), re.IGNORECASE)
    if match:
        return {
            'part': int(match.group(1)),
            'total': int(match.group(2))
        }
    return None


def _normalize_language(self, lang_code: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –∫–æ–¥"""
    if not lang_code:
        return "unknown"

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–º–µ–Ω—ã
    lang_map = {
        "en": "en-US", "de": "de-DE", "fr": "fr-FR", "it": "it-IT",
        "es": "es-ES", "pt": "pt-PT", "ru": "ru-RU", "ja": "ja-JP",
        "ko": "ko-KR", "zh": "zh-CN", "pl": "pl-PL", "tr": "tr-TR"
    }

    code = lang_code.lower().replace("_", "-")

    # –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π –∫–æ–¥
    if "-" in code and len(code) == 5:
        return code

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return lang_map.get(code, f"{code}-XX")