# services/conversion_logger.py

from pathlib import Path
from typing import Dict, List
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class ConversionLogger:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""

    @staticmethod
    def write_conversion_log(
            log_path: Path,
            source_file: Path,
            stats: Dict,
            detailed_stats: Dict,
            src_lang: str,
            tgt_lang: str,
            output_files: List[Path]
    ):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π –ª–æ–≥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:
            with open(log_path, 'w', encoding='utf-8') as f:
                ConversionLogger._write_header(f, source_file, src_lang, tgt_lang)
                ConversionLogger._write_statistics(f, stats)
                ConversionLogger._write_output_files(f, output_files, log_path)
                ConversionLogger._write_skipped_examples(f, detailed_stats)
                ConversionLogger._write_recommendations(f, stats)
                ConversionLogger._write_footer(f)

            logger.info(f"Conversion log created: {log_path}")

        except Exception as e:
            logger.error(f"Error writing conversion log: {e}")

    @staticmethod
    def _write_header(f, source_file: Path, src_lang: str, tgt_lang: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–∞"""
        f.write("=" * 80 + "\n")
        f.write("üîÑ CONVERSION LOG - CONVERTER PRO v2.0\n")
        f.write("=" * 80 + "\n")
        f.write(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {source_file.name}\n")
        f.write(f"üìÇ –ü—É—Ç—å: {source_file.parent}\n")
        f.write(f"üóÇÔ∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {source_file.stat().st_size / (1024 * 1024):.1f} MB\n")
        f.write("\n")

        # –Ø–∑—ã–∫–∏
        f.write("üåê –Ø–ó–´–ö–ò\n")
        f.write("-" * 40 + "\n")
        f.write(f"üì• –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫: {src_lang}\n")
        f.write(f"üì§ –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: {tgt_lang}\n")
        f.write("\n")

    @staticmethod
    def _write_statistics(f, stats: Dict):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        f.write("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n")
        f.write("-" * 40 + "\n")
        f.write(f"üìã –í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ SDLTM: {stats['total_in_sdltm']:,}\n")
        f.write(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {stats['processed']:,}\n")
        f.write(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ TMX: {stats['exported']:,}\n")
        f.write(f"‚è±Ô∏è –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {stats['conversion_time']:.2f} —Å–µ–∫—É–Ω–¥\n")
        f.write(f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {stats['memory_used_mb']:.1f} MB\n")
        f.write("\n")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        f.write("‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù–ù–´–ï –°–ï–ì–ú–ï–ù–¢–´\n")
        f.write("-" * 40 + "\n")
        f.write(f"üî∏ –ü—É—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã: {stats['skipped_empty']:,}\n")
        f.write(f"üî∏ –¢–æ–ª—å–∫–æ —Ç–µ–≥–∏ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞): {stats['skipped_tags_only']:,}\n")
        f.write(f"üî∏ –î—É–±–ª–∏–∫–∞—Ç—ã: {stats['skipped_duplicates']:,}\n")
        f.write(f"üî∏ –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞: {stats['skipped_errors']:,}\n")

        total_skipped = (stats['skipped_empty'] + stats['skipped_tags_only'] +
                         stats['skipped_duplicates'] + stats['skipped_errors'])
        f.write(f"üìä –ò—Ç–æ–≥–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ: {total_skipped:,}\n")
        f.write(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(stats['exported'] / stats['total_in_sdltm'] * 100):.1f}%\n")
        f.write("\n")

    @staticmethod
    def _write_output_files(f, output_files: List[Path], log_path: Path):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        f.write("üì§ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´\n")
        f.write("-" * 40 + "\n")
        for output_file in output_files:
            file_size = output_file.stat().st_size / (1024 * 1024) if output_file.exists() else 0
            f.write(f"üìÑ {output_file.name} ({file_size:.1f} MB)\n")
        f.write(f"üìÑ {log_path.name} (—ç—Ç–æ—Ç –ª–æ–≥)\n")
        f.write("\n")

    @staticmethod
    def _write_skipped_examples(f, detailed_stats: Dict):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤"""
        skipped_details = detailed_stats.get("skipped_details", {})

        if skipped_details.get("empty"):
            f.write("üîç –ü–†–ò–ú–ï–†–´ –ü–£–°–¢–´–• –°–ï–ì–ú–ï–ù–¢–û–í\n")
            f.write("-" * 40 + "\n")
            for i, (src, tgt) in enumerate(skipped_details["empty"][:5], 1):
                f.write(f"  {i}. Source: '{src}'\n")
                f.write(f"     Target: '{tgt}'\n")
                f.write("\n")

        if skipped_details.get("tags_only"):
            f.write("üè∑Ô∏è –ü–†–ò–ú–ï–†–´ –°–ï–ì–ú–ï–ù–¢–û–í –¢–û–õ–¨–ö–û –° –¢–ï–ì–ê–ú–ò\n")
            f.write("-" * 40 + "\n")
            for i, (src, tgt) in enumerate(skipped_details["tags_only"][:5], 1):
                f.write(f"  {i}. Source: '{src}'\n")
                f.write(f"     Target: '{tgt}'\n")
                f.write("\n")

        if skipped_details.get("duplicates"):
            f.write("üîÑ –ü–†–ò–ú–ï–†–´ –î–£–ë–õ–ò–ö–ê–¢–û–í\n")
            f.write("-" * 40 + "\n")
            for i, (src, tgt) in enumerate(skipped_details["duplicates"][:5], 1):
                f.write(f"  {i}. Source: '{src}'\n")
                f.write(f"     Target: '{tgt}'\n")
                f.write("\n")

        if skipped_details.get("errors"):
            f.write("‚ùå –ü–†–ò–ú–ï–†–´ –û–®–ò–ë–û–ö –ü–ê–†–°–ò–ù–ì–ê\n")
            f.write("-" * 40 + "\n")
            for i, (src, tgt) in enumerate(skipped_details["errors"][:5], 1):
                f.write(f"  {i}. Source: '{src}'\n")
                f.write(f"     Target: '{tgt}'\n")
                f.write("\n")

    @staticmethod
    def _write_recommendations(f, stats: Dict):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        f.write("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n")
        f.write("-" * 40 + "\n")

        if stats['skipped_empty'] > 0:
            f.write(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {stats['skipped_empty']:,} –ø—É—Å—Ç—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è SDLTM —Ñ–∞–π–ª–æ–≤.\n")

        if stats['skipped_duplicates'] > stats['exported'] * 0.1:
            f.write(f"‚Ä¢ –ú–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ({stats['skipped_duplicates']:,}). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –∏—Å—Ö–æ–¥–Ω–æ–π TM.\n")

        if stats['skipped_tags_only'] > 0:
            f.write(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {stats['skipped_tags_only']:,} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–≥–∞–º–∏. –≠—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã.\n")

        efficiency = (stats['exported'] / stats['total_in_sdltm'] * 100)
        if efficiency > 80:
            f.write("‚Ä¢ ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!\n")
        elif efficiency > 60:
            f.write("‚Ä¢ ‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –º–Ω–æ–≥–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤.\n")
        else:
            f.write("‚Ä¢ ‚ùå –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.\n")

        f.write("\n")

    @staticmethod
    def _write_footer(f):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–¥–≤–∞–ª –ª–æ–≥–∞"""
        f.write("=" * 80 + "\n")
        f.write("üîß –°–æ–∑–¥–∞–Ω–æ Converter Pro v2.0 - Professional TM/TB/TMX Converter\n")
        f.write("=" * 80 + "\n")

    @staticmethod
    def log_conversion_summary(filepath: Path, stats: Dict, src_lang: str, tgt_lang: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ–±—ã—á–Ω—ã–π –ª–æ–≥"""
        logger.info("=" * 60)
        logger.info(f"CONVERSION SUMMARY: {filepath.name}")
        logger.info("=" * 60)
        logger.info(f"Languages: {src_lang} ‚Üí {tgt_lang}")
        logger.info(f"Total segments in SDLTM: {stats['total_in_sdltm']:,}")
        logger.info(f"Segments processed: {stats['processed']:,}")
        logger.info(f"Segments exported: {stats['exported']:,}")
        logger.info(f"Conversion time: {stats['conversion_time']:.2f} seconds")
        logger.info(f"Memory used: {stats['memory_used_mb']:.1f} MB")
        logger.info("")
        logger.info("SKIPPED SEGMENTS:")
        logger.info(f"  Empty segments: {stats['skipped_empty']:,}")
        logger.info(f"  Tag-only segments: {stats['skipped_tags_only']:,}")
        logger.info(f"  Duplicate segments: {stats['skipped_duplicates']:,}")
        logger.info(f"  Error segments: {stats['skipped_errors']:,}")
        logger.info("=" * 60)