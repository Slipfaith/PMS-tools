#!/usr/bin/env python3
# main.py - Converter Pro v2.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SDLXLIFF

import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('converter.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


def setup_app_paths():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app_dir = Path(__file__).parent
    sys.path.insert(0, str(app_dir))

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é sdlxliff_split_merge
    sdlxliff_module = app_dir / 'sdlxliff_split_merge'
    if sdlxliff_module.exists():
        sys.path.insert(0, str(sdlxliff_module))
        logger.info(f"Added SDLXLIFF module path: {sdlxliff_module}")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    missing_deps = []
    optional_deps = []

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import PySide6
        logger.info(f"PySide6 version: {PySide6.__version__}")
    except ImportError:
        missing_deps.append("PySide6")

    try:
        import openpyxl
        logger.info(f"openpyxl version: {openpyxl.__version__}")
    except ImportError:
        missing_deps.append("openpyxl")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import langcodes
        # langcodes –Ω–µ –∏–º–µ–µ—Ç __version__, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
        logger.info("langcodes available")
    except ImportError:
        optional_deps.append("langcodes")
        logger.warning("langcodes not found - language detection may be limited")

    try:
        import chardet
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            version = chardet.__version__
            logger.info(f"chardet version: {version}")
        except AttributeError:
            logger.info("chardet available")
    except ImportError:
        optional_deps.append("chardet")
        logger.warning("chardet not found - encoding detection may be limited")

    try:
        import lxml
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ lxml.etree
        try:
            from lxml import etree
            logger.info(f"lxml version: {etree.__version__}")
        except (ImportError, AttributeError):
            logger.info("lxml available")
    except ImportError:
        optional_deps.append("lxml")
        logger.warning("lxml not found - using standard xml parser")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è SDLXLIFF
    try:
        from sdlxliff_split_merge import Splitter, Merger, SdlxliffValidator
        logger.info("SDLXLIFF module loaded successfully")
    except ImportError as e:
        logger.warning(f"SDLXLIFF module not found: {e}")
        logger.warning("SDLXLIFF split/merge functionality will be disabled")

    if missing_deps:
        print("\n‚ö†Ô∏è  Missing required dependencies:")
        for dep in missing_deps:
            print(f"   ‚ùå {dep}")
        print("\nüì¶ Install required dependencies:")
        print(f"   pip install {' '.join(missing_deps)}")
        return False

    if optional_deps:
        print("\nüí° Optional dependencies not installed:")
        for dep in optional_deps:
            print(f"   ‚ö†Ô∏è  {dep}")
        print("\nüì¶ For full functionality, install:")
        print(f"   pip install {' '.join(optional_deps)}")
        print("\n‚úÖ Continuing without optional dependencies...\n")

    return True


def check_sdlxliff_module():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥—É–ª—è SDLXLIFF"""
    app_dir = Path(__file__).parent
    sdlxliff_dir = app_dir / 'sdlxliff_split_merge'

    required_files = [
        '__init__.py',
        'splitter.py',
        'merger.py',
        'validator.py',
        'xml_utils.py',
        'io_utils.py'
    ]

    if not sdlxliff_dir.exists():
        logger.warning(f"SDLXLIFF module directory not found: {sdlxliff_dir}")
        print("\n‚ö†Ô∏è  SDLXLIFF module not found!")
        print("   Please ensure 'sdlxliff_split_merge' folder exists with required files:")
        for file in required_files:
            print(f"   - {file}")
        return False

    missing_files = []
    for file in required_files:
        if not (sdlxliff_dir / file).exists():
            missing_files.append(file)

    if missing_files:
        logger.warning(f"Missing SDLXLIFF module files: {missing_files}")
        print(f"\n‚ö†Ô∏è  Missing files in sdlxliff_split_merge:")
        for file in missing_files:
            print(f"   ‚ùå {file}")
        return False

    logger.info("SDLXLIFF module structure verified")
    return True


def create_application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    from PySide6.QtWidgets import QApplication
    from PySide6.QtCore import Qt
    from PySide6.QtGui import QFont, QIcon

    app = QApplication(sys.argv)
    app.setApplicationName("Converter Pro")
    app.setApplicationVersion("2.0")
    app.setOrganizationName("ConverterPro")
    app.setApplicationDisplayName("Converter Pro v2.0 - TM/TB/TMX/Excel/SDLXLIFF Converter")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
    app.setStyle("Fusion")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
    font = QFont("Segoe UI", 9)
    app.setFont(font)

    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    icon_path = Path(__file__).parent / "resources" / "icon.png"
    if icon_path.exists():
        app.setWindowIcon(QIcon(str(icon_path)))
        logger.info(f"Application icon set from {icon_path}")
    else:
        logger.info("Application icon not found, using default")

    # –í–∫–ª—é—á–∞–µ–º high DPI –ø–æ–¥–¥–µ—Ä–∂–∫—É
    app.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    app.setAttribute(Qt.AA_UseHighDpiPixmaps, True)

    return app


def show_startup_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("=" * 60)
    print("üöÄ Converter Pro v2.0")
    print("=" * 60)
    print("Professional TM/TB/TMX/Excel/SDLXLIFF Converter")
    print("\nSupported formats:")
    print("  ‚úÖ SDL Trados Memory (.sdltm)")
    print("  ‚úÖ Excel Workbooks (.xlsx, .xls)")
    print("  ‚úÖ Translation Memory eXchange (.tmx)")
    print("  ‚úÖ SDL XLIFF (.sdlxliff) - Split/Merge")
    print("  ‚úÖ MultiTerm XML/Termbase (.xml, .mtf, .tbx)")
    print("=" * 60)
    print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("=" * 60)
    logger.info("Starting Converter Pro v2.0")
    logger.info("=" * 60)

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        show_startup_info()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
        setup_app_paths()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print("üîç Checking dependencies...")
        if not check_dependencies():
            logger.error("Required dependencies not found")
            sys.exit(1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è SDLXLIFF
        print("üîç Checking SDLXLIFF module...")
        sdlxliff_available = check_sdlxliff_module()
        if not sdlxliff_available:
            print("\n‚ö†Ô∏è  SDLXLIFF functionality will be limited!")
            print("   You can still use other conversion features.\n")

        print("\n‚úÖ All checks passed!")
        print("\nüöÄ Starting application...\n")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_application()

        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        try:
            from gui.windows.main_window import MainWindow
            logger.info("Creating main window...")

            main_window = MainWindow()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            main_window.setWindowTitle("Converter Pro v2.0 - Professional TM/TB/TMX/Excel/SDLXLIFF Converter")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
            main_window.show()
            main_window.raise_()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ–º –æ–∫–Ω–æ –Ω–∞–≤–µ—Ä—Ö
            main_window.activateWindow()  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫–Ω–æ

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            from PySide6.QtCore import QSysInfo
            logger.info(f"System: {QSysInfo.prettyProductName()}")
            logger.info(f"Kernel: {QSysInfo.kernelType()} {QSysInfo.kernelVersion()}")
            logger.info(f"CPU Architecture: {QSysInfo.currentCpuArchitecture()}")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            app.processEvents()

            logger.info("Main window created and shown successfully")
            print("‚úÖ Application started successfully!")
            print("\nüí° Tip: Check 'converter.log' for detailed information")

        except ImportError as ie:
            logger.error(f"Failed to import main window: {ie}")
            print(f"\n‚ùå Error: Failed to import main window")
            print(f"   Details: {ie}")
            print("\nüîß Please check that all GUI modules are present:")
            print("   - gui/windows/main_window.py")
            print("   - gui/widgets/")
            print("   - gui/dialogs/")
            return 1
        except Exception as e:
            logger.exception(f"Failed to create main window: {e}")
            print(f"\n‚ùå Error: Failed to create main window")
            print(f"   Details: {e}")
            return 1

        logger.info("Application started successfully, entering main event loop")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        exit_code = app.exec()

        logger.info(f"Application finished with exit code: {exit_code}")
        logger.info("=" * 60)

        if exit_code == 0:
            print("\nüëã Thank you for using Converter Pro!")

        return exit_code

    except KeyboardInterrupt:
        logger.info("Application interrupted by user")
        print("\n\n‚ö†Ô∏è  Application interrupted by user")
        return 0
    except Exception as e:
        error_msg = f"Critical error during startup: {e}"
        logger.exception(error_msg)
        print(f"\nüí• CRITICAL ERROR: {error_msg}")
        print("\nüìã Please check 'converter.log' for details")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π
        try:
            from PySide6.QtWidgets import QApplication, QMessageBox
            if QApplication.instance():
                QMessageBox.critical(
                    None,
                    "Critical Error",
                    f"Failed to start Converter Pro:\n\n{e}\n\n"
                    f"Please check converter.log for details."
                )
        except:
            pass

        return 1


if __name__ == "__main__":
    sys.exit(main())