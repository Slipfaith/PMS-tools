# gui/windows/main_window.py - –ë–ï–ó –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–• –†–ê–ó–ú–ï–†–û–í

from PySide6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QTextEdit, QFileDialog, QMessageBox,
    QGroupBox, QCheckBox, QSplitter, QFrame, QLineEdit
)
from PySide6.QtCore import Qt
from PySide6.QtGui import QFont
from gui.ui_constants import (
    HEADER_FRAME_STYLE,
    TITLE_LABEL_STYLE,
    DESC_LABEL_STYLE,
    ADD_EXCEL_BUTTON_STYLE,
    START_BUTTON_STYLE,
    STOP_BUTTON_STYLE,
)
from pathlib import Path
from typing import List
import logging

logger = logging.getLogger(__name__)


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""

    def __init__(self):
        super().__init__()

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        from controller import MainController
        self.controller = MainController()
        from services import ConversionManager
        self.manager = ConversionManager()

        self.setup_window()
        self.setup_ui()
        self.setup_worker()
        self.setup_connections()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.is_converting = False
        self.current_batch_results = []

        logger.info("Main window initialized with Excel support")

    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.setWindowTitle("Converter Pro v2.0 - TM/TB/TMX/Excel Converter")
        # –£–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∞–∫ —É–≥–æ–¥–Ω–æ
        self.resize(1000, 700)  # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

        # –ù–û–í–û–ï: –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –∑–∞ –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á
        self.setWindowFlags(self.windowFlags() & ~Qt.WindowFullscreenButtonHint)

    def showEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞"""
        super().showEvent(event)
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –æ–∫–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
        self.ensure_window_in_screen()

    def ensure_window_in_screen(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–∫–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞"""
        from PySide6.QtWidgets import QApplication
        from PySide6.QtGui import QScreen

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é —ç–∫—Ä–∞–Ω–∞ (–±–µ–∑ –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á)
        screen = QApplication.primaryScreen()
        if screen:
            available_geometry = screen.availableGeometry()
            window_geometry = self.geometry()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–∫–Ω–∞
            if not available_geometry.contains(window_geometry):
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                self.move(available_geometry.center() - window_geometry.center())

                # –ï—Å–ª–∏ –æ–∫–Ω–æ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
                if (window_geometry.width() > available_geometry.width() or
                        window_geometry.height() > available_geometry.height()):
                    new_width = min(window_geometry.width(), available_geometry.width() - 20)
                    new_height = min(window_geometry.height(), available_geometry.height() - 20)
                    self.resize(new_width, new_height)
                    self.move(available_geometry.center() - self.rect().center())

    def changeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∫–Ω–∞"""
        from PySide6.QtCore import QEvent
        if event.type() == QEvent.WindowStateChange:
            if self.windowState() & Qt.WindowMaximized:
                # –ü—Ä–∏ –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
                from PySide6.QtWidgets import QApplication
                screen = QApplication.primaryScreen()
                if screen:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º availableGeometry –≤–º–µ—Å—Ç–æ geometry
                    self.setGeometry(screen.availableGeometry())
        super().changeEvent(event)

    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header(main_layout)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(splitter)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∞–π–ª—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_panel = self.create_left_panel()
        splitter.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏
        right_panel = self.create_right_panel()
        splitter.addWidget(right_panel)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        splitter.setSizes([600, 400])

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.setup_status_bar()

    def create_header(self, layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header_frame = QFrame()
        header_frame.setStyleSheet(HEADER_FRAME_STYLE)
        header_layout = QHBoxLayout(header_frame)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("Converter Pro v2.0")
        title_label.setStyleSheet(TITLE_LABEL_STYLE)
        header_layout.addWidget(title_label)

        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = QLabel("Professional TM/TB/TMX/Excel Converter")
        desc_label.setStyleSheet(DESC_LABEL_STYLE)
        header_layout.addWidget(desc_label)

        header_layout.addStretch()
        layout.addWidget(header_frame)

    def create_left_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        panel = QWidget()
        layout = QVBoxLayout(panel)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        from gui.widgets.drop_area import SmartDropArea
        self.drop_area = SmartDropArea()
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
        self.drop_area.files_dropped.connect(self.on_files_dropped)
        self.drop_area.files_dragged.connect(self.on_files_dragged)
        layout.addWidget(self.drop_area)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
        file_buttons = QHBoxLayout()

        self.add_files_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã")
        self.add_files_btn.clicked.connect(self.open_file_dialog)
        file_buttons.addWidget(self.add_files_btn)

        # –ù–û–í–ê–Ø –∫–Ω–æ–ø–∫–∞ –¥–ª—è Excel
        self.add_excel_btn = QPushButton("üìä –î–æ–±–∞–≤–∏—Ç—å Excel")
        self.add_excel_btn.setStyleSheet(ADD_EXCEL_BUTTON_STYLE)
        self.add_excel_btn.clicked.connect(self.open_excel_dialog)
        file_buttons.addWidget(self.add_excel_btn)

        self.clear_files_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_files_btn.clicked.connect(self.clear_files)
        file_buttons.addWidget(self.clear_files_btn)

        file_buttons.addStretch()
        layout.addLayout(file_buttons)

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        from gui.widgets.file_list import FileListWidget
        self.file_list = FileListWidget()
        self.file_list.file_remove_requested.connect(self.on_file_remove_requested)
        self.file_list.clear_all_btn.clicked.connect(self.clear_files)
        layout.addWidget(self.file_list)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        settings_group = self.create_settings_group()
        layout.addWidget(settings_group)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = QHBoxLayout()

        self.start_btn = QPushButton("–ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
        self.start_btn.setMinimumHeight(40)
        self.start_btn.setStyleSheet(START_BUTTON_STYLE)
        self.start_btn.clicked.connect(self.start_conversion)
        self.start_btn.setEnabled(False)
        action_buttons.addWidget(self.start_btn)

        self.stop_btn = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setMinimumHeight(40)
        self.stop_btn.setStyleSheet(STOP_BUTTON_STYLE)
        self.stop_btn.clicked.connect(self.stop_conversion)
        self.stop_btn.setEnabled(False)
        action_buttons.addWidget(self.stop_btn)

        layout.addLayout(action_buttons)
        return panel

    def create_right_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –ª–æ–≥–∞–º–∏"""
        panel = QWidget()
        layout = QVBoxLayout(panel)

        # –í–∏–¥–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        from gui.widgets.progress_widget import ProgressWidget
        self.progress_widget = ProgressWidget()
        layout.addWidget(self.progress_widget)

        # –õ–æ–≥–∏
        logs_group = QGroupBox("–õ–æ–≥–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        logs_layout = QVBoxLayout(logs_group)

        self.log_text = QTextEdit()
        self.log_text.setFont(QFont("Consolas", 9))
        self.log_text.setMaximumHeight(200)
        logs_layout.addWidget(self.log_text)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
        log_buttons = QHBoxLayout()

        clear_log_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏")
        clear_log_btn.clicked.connect(self.log_text.clear)
        log_buttons.addWidget(clear_log_btn)

        save_log_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏")
        save_log_btn.clicked.connect(self.save_logs)
        log_buttons.addWidget(save_log_btn)

        log_buttons.addStretch()
        logs_layout.addLayout(log_buttons)

        layout.addWidget(logs_group)

        # Removed results widget
        return panel

    def create_settings_group(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        layout = QVBoxLayout(group)

        # –§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_layout = QHBoxLayout()
        export_layout.addWidget(QLabel("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:"))

        self.tmx_cb = QCheckBox("TMX")
        self.tmx_cb.setChecked(True)
        export_layout.addWidget(self.tmx_cb)

        self.xlsx_cb = QCheckBox("XLSX")
        export_layout.addWidget(self.xlsx_cb)

        self.json_cb = QCheckBox("JSON")
        export_layout.addWidget(self.json_cb)

        export_layout.addStretch()
        layout.addLayout(export_layout)

        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏
        auto_lang_layout = QHBoxLayout()
        auto_lang_layout.addWidget(QLabel("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏:"))
        self.auto_langs_label = QLabel("–ë—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
        self.auto_langs_label.setStyleSheet("color: #666; font-style: italic;")
        auto_lang_layout.addWidget(self.auto_langs_label)
        auto_lang_layout.addStretch()
        layout.addLayout(auto_lang_layout)

        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
        override_label = QLabel("–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è):")
        override_label.setStyleSheet("font-size: 11px; color: #666; margin-top: 5px;")
        layout.addWidget(override_label)

        manual_layout = QHBoxLayout()
        manual_layout.addWidget(QLabel("–ò—Å—Ö–æ–¥–Ω—ã–π:"))

        self.src_lang_edit = QLineEdit()
        self.src_lang_edit.setPlaceholderText("–Ω–∞–ø—Ä–∏–º–µ—Ä: en-US")
        self.src_lang_edit.setMaximumWidth(120)
        manual_layout.addWidget(self.src_lang_edit)

        manual_layout.addWidget(QLabel("–¶–µ–ª–µ–≤–æ–π:"))
        self.tgt_lang_edit = QLineEdit()
        self.tgt_lang_edit.setPlaceholderText("–Ω–∞–ø—Ä–∏–º–µ—Ä: ru-RU")
        self.tgt_lang_edit.setMaximumWidth(120)
        manual_layout.addWidget(self.tgt_lang_edit)

        manual_layout.addStretch()
        layout.addLayout(manual_layout)

        return group

    def setup_worker(self):
        """Connects conversion manager signals."""
        self.manager.progress_changed.connect(self.on_progress_update)
        self.manager.file_started.connect(self.on_file_started)
        self.manager.file_completed.connect(self.on_file_completed)
        self.manager.batch_completed.connect(self.on_batch_completed)
        self.manager.error_occurred.connect(self.on_conversion_error)
        self.manager.excel_conversion_finished.connect(self.on_excel_conversion_finished)
        self.manager.excel_conversion_error.connect(self.on_excel_conversion_error)

    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.file_list.files_changed.connect(self.on_files_changed)

    def setup_status_bar(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.statusBar().addWidget(self.status_label)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–µ—Ä—Å–∏–∏
        version_label = QLabel("v2.0 + Excel")
        version_label.setStyleSheet("color: #666; font-size: 10px;")
        self.statusBar().addPermanentWidget(version_label)

    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        filename, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", "conversion_logs.txt", "Text files (*.txt)"
        )

        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.toPlainText())
                self.log_message(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")

    def log_message(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        self.log_text.append(formatted_message)

        # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –∫–æ–Ω—Ü—É
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        self.log_text.setTextCursor(cursor)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ
        if self.log_text.document().lineCount() > 1000:
            cursor.movePosition(cursor.MoveOperation.Start)
            cursor.movePosition(cursor.MoveOperation.Down, cursor.MoveMode.KeepAnchor, 100)
            cursor.removeSelectedText()

    # ===========================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò
    # ===========================================

    def on_files_dropped(self, filepaths: List[str]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Excel"""
        excel_files = []
        regular_files = []

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ Excel –∏ –æ–±—ã—á–Ω—ã–µ
        for filepath in filepaths:
            path = Path(filepath)
            if self.controller.is_excel_file(path):
                excel_files.append(filepath)
            else:
                regular_files.append(filepath)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for excel_file in excel_files:
            self.handle_excel_file(Path(excel_file))

        # –û–±—ã—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        if regular_files:
            files_info = self.controller.add_files(regular_files)
            if files_info:
                self.file_list.update_files(files_info)
                self.log_message(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_info)}")
                self._update_auto_languages_display()

    def on_files_dragged(self, filepaths: List[str]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏"""
        format_name, valid_files = self.controller.detect_drop_files(filepaths)
        is_valid = len(valid_files) > 0
        self.drop_area.set_format_info(format_name, is_valid)

    def on_file_remove_requested(self, filepath: Path):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if self.controller.remove_file(filepath):
            self._refresh_file_list()
            self.log_message(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filepath.name}")

    def open_file_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        files, _ = QFileDialog.getOpenFileNames(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            "",
            "–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ (*.sdltm *.xlsx *.xls *.tmx *.xml);;SDLTM (*.sdltm);;Excel (*.xlsx *.xls);;TMX (*.tmx);;XML (*.xml)"
        )

        if files:
            self.on_files_dropped(files)

    def open_excel_dialog(self):
        """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ Excel —Ñ–∞–π–ª–æ–≤"""
        files, _ = QFileDialog.getOpenFileNames(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            "",
            "Excel —Ñ–∞–π–ª—ã (*.xlsx *.xls);;XLSX (*.xlsx);;XLS (*.xls)"
        )

        if files:
            for excel_file in files:
                self.handle_excel_file(Path(excel_file))

    def clear_files(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        self.controller.clear_files()
        self.file_list.clear()
        self.progress_widget.reset()
        self.log_message("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")
        self._update_auto_languages_display()

    # ===========================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø EXCEL
    # ===========================================

    def handle_excel_file(self, filepath: Path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Excel —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self.log_message(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª: {filepath.name}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.controller.show_excel_config_dialog(filepath, self)

            if settings:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–∏–ª - –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                self.log_message(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel –ø—Ä–∏–Ω—è—Ç—ã: {filepath.name}")
                self.start_excel_conversion(filepath, settings)
            else:
                self.log_message(f"‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Excel –æ—Ç–º–µ–Ω–µ–Ω–∞: {filepath.name}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞: {e}"
            self.log_message(f"üí• {error_msg}")
            logger.exception(error_msg)

            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ Excel",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Excel —Ñ–∞–π–ª:\n\n{filepath.name}\n\n{e}"
            )

    def start_excel_conversion(self, filepath: Path, settings):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Excel —Ñ–∞–π–ª–∞"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            is_valid, error_msg = self.controller.validate_excel_conversion_settings(settings)
            if not is_valid:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫", error_msg)
                return

            # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            options = self.controller.prepare_excel_conversion_options(settings)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–±—ç–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            options.progress_callback = lambda progress, message: self.progress_widget.update_progress(
                progress, f"Excel: {message}", 1, 1
            )
            options.should_stop_callback = lambda: not self.is_converting

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Excel worker
            self.manager.start_excel(filepath, settings, options)

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º UI –≤ —Ä–µ–∂–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            self.is_converting = True
            self.start_btn.setEnabled(False)
            self.stop_btn.setEnabled(True)
            self.add_files_btn.setEnabled(False)
            self.add_excel_btn.setEnabled(False)

            self.progress_widget.reset()
            self.log_message(f"üöÄ –ù–∞—á–∞—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Excel: {filepath.name}")
            self.log_message(f"   üìä –õ–∏—Å—Ç–æ–≤: {len(settings.selected_sheets)}")
            self.log_message(f"   üåê –Ø–∑—ã–∫–∏: {settings.source_language} ‚Üí {settings.target_language}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            self.log_message(f"üí• {error_msg}")
            logger.exception(error_msg)

            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Excel:\n\n{e}"
            )

    def on_excel_conversion_finished(self, result):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            self.is_converting = False
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.add_files_btn.setEnabled(True)
            self.add_excel_btn.setEnabled(True)

            if result.success:
                # –£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                stats = result.stats

                self.progress_widget.set_completion_status(True, "Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

                self.log_message(
                    f"‚úÖ Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {stats.get('conversion_time', 0):.1f}—Å! "
                    f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('exported_segments', 0)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                QMessageBox.information(
                    self,
                    "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    f"Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n\n"
                    f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('exported_segments', 0)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n"
                    f"–í—Ä–µ–º—è: {stats.get('conversion_time', 0):.1f} —Å–µ–∫—É–Ω–¥\n"
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º."
                )

            else:
                # –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                self.progress_widget.set_completion_status(False, "–û—à–∏–±–∫–∞ Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

                error_msg = '; '.join(result.errors) if result.errors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {error_msg}")

                QMessageBox.warning(
                    self,
                    "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Excel —Ñ–∞–π–ª:\n\n{error_msg}"
                )

        except Exception as e:
            logger.exception(f"Error in Excel conversion finished handler: {e}")

    def on_excel_conversion_error(self, error_msg: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            self.is_converting = False
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.add_files_btn.setEnabled(True)
            self.add_excel_btn.setEnabled(True)

            self.progress_widget.set_error_status(error_msg)
            self.log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Excel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {error_msg}")

            QMessageBox.critical(
                self,
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel:\n\n{error_msg}"
            )

        except Exception as e:
            logger.exception(f"Error in Excel error handler: {e}")

    # ===========================================
    # –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –û–ë–´–ß–ù–´–• –§–ê–ô–õ–û–í
    # ===========================================

    def start_conversion(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        # –°–æ–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ GUI
        gui_options = {
            'export_tmx': self.tmx_cb.isChecked(),
            'export_xlsx': self.xlsx_cb.isChecked(),
            'export_json': self.json_cb.isChecked(),
            'source_lang': self.src_lang_edit.text().strip(),
            'target_lang': self.tgt_lang_edit.text().strip()
        }

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        is_valid, error_msg = self.controller.validate_conversion_request(gui_options)
        if not is_valid:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", error_msg)
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        options = self.controller.prepare_conversion_options(gui_options)
        files = self.controller.get_files_for_conversion()

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º UI –≤ —Ä–µ–∂–∏–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.is_converting = True
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.add_files_btn.setEnabled(False)
        self.add_excel_btn.setEnabled(False)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        self.progress_widget.reset()
        self.file_list.reset_all_status()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ worker
        self.manager.start_batch(files, options)
        self.log_message(f"üöÄ –ù–∞—á–∞—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {len(files)} —Ñ–∞–π–ª–æ–≤")

    def stop_conversion(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"""
        self.is_converting = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ workers
        self.manager.stop_all()

        self.log_message("üõë –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π...")

    def _refresh_file_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        files_info = []
        for filepath in self.controller.get_files_for_conversion():
            file_info = self.controller.file_service.get_file_info(filepath)
            files_info.append({
                'path': filepath,
                'name': file_info['name'],
                'size_mb': file_info['size_mb'],
                'format': file_info['format'],
                'format_icon': file_info['format_icon'],
                'extra_info': file_info['extra_info']
            })

        self.file_list.update_files(files_info)

    def _update_auto_languages_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        languages = self.controller.get_auto_detected_languages()

        if languages:
            lang_text = f"{languages['source']} ‚Üí {languages['target']}"
            self.auto_langs_label.setText(lang_text)
            self.auto_langs_label.setStyleSheet("color: #4CAF50; font-weight: bold;")
        else:
            self.auto_langs_label.setText("–ë—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            self.auto_langs_label.setStyleSheet("color: #666; font-style: italic;")

    # ===========================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò WORKER'–ê –î–õ–Ø –û–ë–´–ß–ù–´–• –§–ê–ô–õ–û–í
    # ===========================================

    def on_progress_update(self, progress: int, message: str, current_file: int, total_files: int):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_widget.update_progress(progress, message, current_file, total_files)

        if total_files > 0:
            self.status_label.setText(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {current_file}/{total_files}: {message}")
        else:
            self.status_label.setText(message)

    def on_file_started(self, filepath: Path):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
        logger.info(f"File started: {filepath.name}")
        self.log_message(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {filepath.name}")

        file_item = self.file_list.get_file_item(filepath)
        if file_item:
            file_item.set_conversion_progress(0, "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    def on_file_completed(self, filepath: Path, result):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
        self.progress_widget.on_file_completed(result.success)

        file_item = self.file_list.get_file_item(filepath)
        if file_item:
            if result.success:
                stats = result.stats
                exported_count = stats.get('exported', 0)
                file_item.set_conversion_completed(True, f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {exported_count}")
            else:
                error_msg = '; '.join(result.errors) if result.errors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                file_item.set_conversion_completed(False, error_msg)

        if result.success:
            self.log_message(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {filepath.name}")

            stats = result.stats
            for out in result.output_files:
                self.log_message(f"  üìÑ {out.name}")
            self.log_message(
                f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('exported', 0)} | "
                f"–í—Å–µ–≥–æ: {stats.get('total_in_sdltm', stats.get('total', 0))} | "
                f"–í—Ä–µ–º—è: {stats.get('conversion_time', 0):.1f}—Å")
        else:
            error_msg = '; '.join(result.errors) if result.errors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {filepath.name} - {error_msg}")

    def on_batch_completed(self, results: List):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–π –ø–∞–∫–µ—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        successful = sum(1 for r in results if r.success)
        total = len(results)

        logger.info(f"Batch completed: {successful}/{total} successful")

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.is_converting = False
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.add_files_btn.setEnabled(True)
        self.add_excel_btn.setEnabled(True)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ progress_widget
        if successful == total:
            self.progress_widget.set_completion_status(True, f"–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            self.progress_widget.set_completion_status(False, f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {successful} –∏–∑ {total} —Ñ–∞–π–ª–æ–≤")

        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_message(f"üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{total} —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏—Ç–æ–≥–∞–º–∏
        if successful > 0:
            QMessageBox.information(
                self,
                "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                f"–£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {successful} –∏–∑ {total} —Ñ–∞–π–ª–æ–≤"
            )
        else:
            QMessageBox.warning(
                self,
                "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å",
                f"–ù–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
            )

    def on_conversion_error(self, error_msg: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        logger.error(f"Conversion error: {error_msg}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º UI –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        self.is_converting = False
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.add_files_btn.setEnabled(True)
        self.add_excel_btn.setEnabled(True)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ progress_widget
        self.progress_widget.set_error_status(error_msg)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        self.log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –æ—à–∏–±–∫–æ–π
        QMessageBox.critical(
            self,
            "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n\n{error_msg}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
        )

    def on_files_changed(self, file_count: int):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        self.start_btn.setEnabled(file_count > 0 and not self.is_converting)
        self.status_label.setText(f"–§–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {file_count}")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∏–¥–µ—Ç
        if self.is_converting:
            reply = QMessageBox.question(
                self,
                "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
                "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )

            if reply == QMessageBox.No:
                event.ignore()
                return

            self.stop_conversion()

        self.manager.shutdown()
        event.accept()
        logger.info("Main window closed")

