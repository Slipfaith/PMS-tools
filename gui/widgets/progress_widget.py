# gui/widgets/progress_widget.py - –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω ETA, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QProgressBar,
    QLabel, QGroupBox, QFrame
)
from PySide6.QtCore import Signal, Qt, QTimer, QPropertyAnimation, QEasingCurve, QMutex, QMutexLocker
from PySide6.QtGui import QFont
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)


class ProgressWidget(QWidget):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∏–¥–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±–µ–∑ ETA, —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""

    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.mutex = QMutex()

        # –í—Ä–µ–º—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.start_time = None
        self.last_update_time = None
        self.successful_files = 0
        self.failed_files = 0
        self.processed_files = 0
        self.current_file_index = 0
        self.total_files = 0

        # –£–ë–†–ê–ù–û: –¢–∞–π–º–µ—Ä –¥–ª—è ETA –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_animation = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.reset()

    def setup_ui(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–µ–∑ ETA"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)

        # –ì—Ä—É–ø–ø–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_group = QGroupBox("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        progress_layout = QVBoxLayout(progress_group)

        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.main_progress = QProgressBar()
        self.main_progress.setMinimum(0)
        self.main_progress.setMaximum(100)
        self.main_progress.setValue(0)
        self.main_progress.setMinimumHeight(30)
        self.main_progress.setStyleSheet("""
            QProgressBar {
                border: 2px solid #e0e0e0;
                border-radius: 15px;
                background: #f8f9fa;
                text-align: center;
                font-weight: bold;
                font-size: 13px;
                color: #333;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4CAF50, stop:1 #45a049);
                border-radius: 13px;
            }
        """)
        progress_layout.addWidget(self.main_progress)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        info_layout = QHBoxLayout()

        # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #333;
                font-weight: bold;
                margin: 4px;
            }
        """)
        info_layout.addWidget(self.status_label)

        info_layout.addStretch()

        # –ü—Ä–æ—Ü–µ–Ω—Ç
        self.percent_label = QLabel("0%")
        self.percent_label.setStyleSheet("""
            QLabel {
                font-size: 16px;
                color: #4CAF50;
                font-weight: bold;
                margin: 4px;
            }
        """)
        info_layout.addWidget(self.percent_label)

        progress_layout.addLayout(info_layout)

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –¢–û–õ–¨–ö–û –§–ê–ô–õ–´
        details_layout = QHBoxLayout()

        # –§–∞–π–ª—ã
        self.files_label = QLabel("–§–∞–π–ª–æ–≤: 0 / 0")
        self.files_label.setStyleSheet("font-size: 12px; color: #666; margin: 2px;")
        details_layout.addWidget(self.files_label)

        details_layout.addStretch()

        progress_layout.addLayout(details_layout)

        layout.addWidget(progress_group)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats_layout = QVBoxLayout(stats_group)

        stats_grid = QHBoxLayout()

        # –£—Å–ø–µ—à–Ω–æ
        success_frame = self.create_stat_frame("‚úÖ", "–£—Å–ø–µ—à–Ω–æ", "0", "#4CAF50")
        stats_grid.addWidget(success_frame)
        self.success_label = success_frame.findChild(QLabel, "value")

        # –û—à–∏–±–∫–∏
        error_frame = self.create_stat_frame("‚ùå", "–û—à–∏–±–æ–∫", "0", "#f44336")
        stats_grid.addWidget(error_frame)
        self.error_label = error_frame.findChild(QLabel, "value")

        # –°–∫–æ—Ä–æ—Å—Ç—å
        speed_frame = self.create_stat_frame("‚ö°", "–°–∫–æ—Ä–æ—Å—Ç—å", "0/–º–∏–Ω", "#FF9800")
        stats_grid.addWidget(speed_frame)
        self.speed_label = speed_frame.findChild(QLabel, "value")

        stats_layout.addLayout(stats_grid)
        layout.addWidget(stats_group)

    def create_stat_frame(self, icon: str, title: str, value: str, color: str) -> QFrame:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–º–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        frame = QFrame()
        frame.setStyleSheet(f"""
            QFrame {{
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                background: white;
                padding: 8px;
            }}
            QFrame:hover {{
                border-color: {color};
                background: #fafafa;
            }}
        """)

        layout = QVBoxLayout(frame)
        layout.setSpacing(4)

        # –ò–∫–æ–Ω–∫–∞
        icon_label = QLabel(icon)
        icon_label.setAlignment(Qt.AlignCenter)
        icon_label.setStyleSheet(f"font-size: 24px; color: {color};")
        layout.addWidget(icon_label)

        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = QLabel(value)
        value_label.setObjectName("value")
        value_label.setAlignment(Qt.AlignCenter)
        value_label.setStyleSheet(f"""
            QLabel {{
                font-size: 18px;
                font-weight: bold;
                color: {color};
            }}
        """)
        layout.addWidget(value_label)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(title)
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("font-size: 10px; color: #666;")
        layout.addWidget(title_label)

        return frame

    def reset(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤–∏–¥–∂–µ—Ç–∞"""
        with QMutexLocker(self.mutex):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            self.start_time = None
            self.last_update_time = None
            self.successful_files = 0
            self.failed_files = 0
            self.processed_files = 0
            self.current_file_index = 0
            self.total_files = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.main_progress.setValue(0)
        self.status_label.setText("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.percent_label.setText("0%")
        self.files_label.setText("–§–∞–π–ª–æ–≤: 0 / 0")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if self.success_label:
            self.success_label.setText("0")
        if self.error_label:
            self.error_label.setText("0")
        if self.speed_label:
            self.speed_label.setText("0/–º–∏–Ω")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
        self.reset_styles()

        logger.debug("Progress widget reset completed")

    def update_progress(self, progress: int, message: str, current_file: int = 0, total_files: int = 0):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±–µ–∑ ETA"""
        logger.debug(f"Progress update: {progress}% - {message} ({current_file}/{total_files})")

        with QMutexLocker(self.mutex):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            self.current_file_index = current_file
            if total_files > 0:
                self.total_files = total_files

            # –°—Ç–∞—Ä—Ç—É–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if self.start_time is None and progress > 0:
                self.start_time = datetime.now()

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if progress > 0:
                self.last_update_time = datetime.now()

        # –ê–Ω–∏–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.animate_progress(progress)

        # –û–±–Ω–æ–≤–ª—è–µ–º labels
        self.status_label.setText(message)
        self.percent_label.setText(f"{progress}%")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        if total_files > 0:
            self.files_label.setText(f"–§–∞–π–ª–æ–≤: {current_file} / {total_files}")

    def animate_progress(self, target_value: int):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if not self.main_progress:
            return

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if self.progress_animation is None:
            self.progress_animation = QPropertyAnimation(self.main_progress, b"value")
            self.progress_animation.setDuration(500)  # 500ms
            self.progress_animation.setEasingCurve(QEasingCurve.OutCubic)

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        if self.progress_animation.state() == QPropertyAnimation.Running:
            self.progress_animation.stop()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        current_value = self.main_progress.value()
        self.progress_animation.setStartValue(current_value)
        self.progress_animation.setEndValue(target_value)
        self.progress_animation.start()

    def on_file_completed(self, success: bool):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        with QMutexLocker(self.mutex):
            self.processed_files += 1

            if success:
                self.successful_files += 1
            else:
                self.failed_files += 1

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–¥–µ—Å—å
            start_time = self.start_time

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.update_stats()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        if start_time:
            elapsed = datetime.now() - start_time
            elapsed_seconds = elapsed.total_seconds()

            if elapsed_seconds > 0:
                files_per_minute = (self.processed_files / elapsed_seconds) * 60
                if self.speed_label:
                    self.speed_label.setText(f"{files_per_minute:.1f}/–º–∏–Ω")

        logger.debug(f"File completed: success={success}, processed={self.processed_files}")

    def update_stats(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with QMutexLocker(self.mutex):
            success_count = self.successful_files
            error_count = self.failed_files

        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        if self.success_label:
            self.success_label.setText(str(success_count))
        if self.error_label:
            self.error_label.setText(str(error_count))

    def set_total_files(self, total: int):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        with QMutexLocker(self.mutex):
            self.total_files = total

        self.files_label.setText(f"–§–∞–π–ª–æ–≤: 0 / {total}")
        logger.debug(f"Total files set to: {total}")

    def set_completion_status(self, success: bool, message: str = ""):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        logger.info(f"Setting completion status: success={success}, message={message}")

        if success:
            self.status_label.setText("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.status_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    color: #4CAF50;
                    font-weight: bold;
                    margin: 4px;
                }
            """)
            self.main_progress.setStyleSheet("""
                QProgressBar {
                    border: 2px solid #4CAF50;
                    border-radius: 15px;
                    background: #f8f9fa;
                    text-align: center;
                    font-weight: bold;
                    font-size: 13px;
                    color: #333;
                }
                QProgressBar::chunk {
                    background: #4CAF50;
                    border-radius: 13px;
                }
            """)
        else:
            self.status_label.setText("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –æ—à–∏–±–∫–∞–º–∏")
            self.status_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    color: #f44336;
                    font-weight: bold;
                    margin: 4px;
                }
            """)
            self.main_progress.setStyleSheet("""
                QProgressBar {
                    border: 2px solid #f44336;
                    border-radius: 15px;
                    background: #f8f9fa;
                    text-align: center;
                    font-weight: bold;
                    font-size: 13px;
                    color: #333;
                }
                QProgressBar::chunk {
                    background: #f44336;
                    border-radius: 13px;
                }
            """)

    def set_error_status(self, error_message: str):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏"""
        logger.error(f"Setting error status: {error_message}")

        self.status_label.setText("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #f44336;
                font-weight: bold;
                margin: 4px;
            }
        """)

    def reset_styles(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π"""
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #333;
                font-weight: bold;
                margin: 4px;
            }
        """)

        self.main_progress.setStyleSheet("""
            QProgressBar {
                border: 2px solid #e0e0e0;
                border-radius: 15px;
                background: #f8f9fa;
                text-align: center;
                font-weight: bold;
                font-size: 13px;
                color: #333;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4CAF50, stop:1 #45a049);
                border-radius: 13px;
            }
        """)

    def get_current_stats(self) -> dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with QMutexLocker(self.mutex):
            return {
                "successful_files": self.successful_files,
                "failed_files": self.failed_files,
                "processed_files": self.processed_files,
                "current_file_index": self.current_file_index,
                "total_files": self.total_files,
                "start_time": self.start_time.isoformat() if self.start_time else None
            }

    def closeEvent(self, event):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞"""
        if self.progress_animation and self.progress_animation.state() == QPropertyAnimation.Running:
            self.progress_animation.stop()

        event.accept()
        logger.debug("Progress widget closed")