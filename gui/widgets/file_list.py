# gui/widgets/file_list.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ú–ê–ö–ï–¢–û–ú

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QListWidget, QListWidgetItem,
    QLabel, QPushButton, QProgressBar, QFrame, QSizePolicy
)
from PySide6.QtCore import Signal, Qt, QSize
from PySide6.QtGui import QFont, QIcon
from pathlib import Path
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)


class FileListItem(QWidget):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–∫–µ—Ç–æ–º"""

    remove_requested = Signal(Path)

    def __init__(self, filepath: Path):
        super().__init__()
        self.filepath = filepath
        self.setup_ui()
        self.analyze_file()

    def setup_ui(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(12, 10, 12, 10)
        main_layout.setSpacing(8)

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ - –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        top_layout = QHBoxLayout()
        top_layout.setSpacing(8)

        # –ò–∫–æ–Ω–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        self.format_icon = QLabel(self.get_format_icon())
        self.format_icon.setStyleSheet("font-size: 18px; margin-right: 4px;")
        self.format_icon.setFixedSize(24, 24)
        self.format_icon.setAlignment(Qt.AlignCenter)
        top_layout.addWidget(self.format_icon)

        # –ò–º—è —Ñ–∞–π–ª–∞
        self.name_label = QLabel(self.filepath.name)
        self.name_label.setStyleSheet("""
            QLabel {
                font-weight: bold;
                font-size: 13px;
                color: #333;
                margin: 0px;
                padding: 2px;
            }
        """)
        self.name_label.setWordWrap(True)
        self.name_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        top_layout.addWidget(self.name_label)

        top_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        self.remove_btn = QPushButton("‚ùå")
        self.remove_btn.setFixedSize(28, 28)
        self.remove_btn.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
                font-size: 14px;
                border-radius: 14px;
                padding: 0px;
            }
            QPushButton:hover {
                background: #ffebee;
                color: #f44336;
            }
            QPushButton:pressed {
                background: #ffcdd2;
            }
        """)
        self.remove_btn.clicked.connect(lambda: self.remove_requested.emit(self.filepath))
        top_layout.addWidget(self.remove_btn)

        main_layout.addLayout(top_layout)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        self.info_label = QLabel()
        self.info_label.setStyleSheet("""
            QLabel {
                font-size: 11px;
                color: #666;
                margin: 0px;
                padding: 2px;
            }
        """)
        self.info_label.setWordWrap(True)
        main_layout.addWidget(self.info_label)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximumHeight(8)
        self.progress_bar.setMinimumHeight(8)
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #ddd;
                border-radius: 4px;
                background: #f0f0f0;
                text-align: center;
            }
            QProgressBar::chunk {
                background: #4CAF50;
                border-radius: 3px;
            }
        """)
        main_layout.addWidget(self.progress_bar)

        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.status_label = QLabel()
        self.status_label.setStyleSheet("""
            QLabel {
                font-size: 10px;
                color: #999;
                margin: 0px;
                padding: 2px;
            }
        """)
        self.status_label.setVisible(False)
        main_layout.addWidget(self.status_label)

        # –†–∞–º–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        self.setStyleSheet("""
            FileListItem {
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                background: white;
                margin: 2px;
            }
            FileListItem:hover {
                border-color: #4CAF50;
                background: #f9fff9;
            }
        """)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
        self.setMinimumHeight(80)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)

    def get_format_icon(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"""
        suffix = self.filepath.suffix.lower()
        icons = {
            '.sdltm': 'üóÑÔ∏è',
            '.xlsx': 'üìä',
            '.xls': 'üìä',
            '.tmx': 'üîÑ',
            '.xml': 'üìã',
            '.mtf': 'üìñ'
        }
        return icons.get(suffix, 'üìÑ')

    def analyze_file(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        try:
            # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            size_bytes = self.filepath.stat().st_size
            if size_bytes < 1024:
                size_str = f"{size_bytes} B"
            elif size_bytes < 1024 * 1024:
                size_str = f"{size_bytes / 1024:.1f} KB"
            else:
                size_str = f"{size_bytes / (1024 * 1024):.1f} MB"

            # –§–æ—Ä–º–∞—Ç
            format_name = self.get_format_name()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            extra_info = self.get_extra_info()

            info_parts = [format_name, size_str]
            if extra_info:
                info_parts.append(extra_info)

            info_text = " ‚Ä¢ ".join(info_parts)
            self.info_label.setText(info_text)

        except Exception as e:
            logger.warning(f"Error analyzing file {self.filepath}: {e}")
            self.info_label.setText(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.info_label.setStyleSheet("color: #f44336; font-size: 11px;")

    def get_format_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞"""
        suffix = self.filepath.suffix.lower()
        formats = {
            '.sdltm': 'SDL Trados Memory',
            '.xlsx': 'Excel Workbook',
            '.xls': 'Excel Workbook',
            '.tmx': 'TMX Memory',
            '.xml': 'XML/Termbase',
            '.mtf': 'MultiTerm Format'
        }
        return formats.get(suffix, 'Unknown Format')

    def get_extra_info(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        suffix = self.filepath.suffix.lower()

        if suffix == '.sdltm':
            return self.get_sdltm_info()
        elif suffix in ['.xlsx', '.xls']:
            return self.get_excel_info()

        return ""

    def get_sdltm_info(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± SDLTM —Ñ–∞–π–ª–µ"""
        try:
            import sqlite3
            with sqlite3.connect(str(self.filepath)) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM translation_units")
                count = cursor.fetchone()[0]
                return f"{count:,} —Å–µ–≥–º–µ–Ω—Ç–æ–≤"
        except Exception:
            return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    def get_excel_info(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± Excel —Ñ–∞–π–ª–µ"""
        try:
            import openpyxl
            wb = openpyxl.load_workbook(str(self.filepath), read_only=True)
            sheets = len(wb.sheetnames)
            wb.close()
            return f"{sheets} –ª–∏—Å—Ç(–æ–≤)"
        except Exception:
            return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    def set_conversion_progress(self, progress: int, message: str = ""):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(progress)

        if message:
            self.status_label.setText(message)
            self.status_label.setVisible(True)

    def set_conversion_completed(self, success: bool, message: str = ""):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        self.progress_bar.setVisible(False)

        if success:
            self.status_label.setText(f"‚úÖ {message}" if message else "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            self.status_label.setStyleSheet("color: #4CAF50; font-size: 10px; font-weight: bold;")
        else:
            self.status_label.setText(f"‚ùå {message}" if message else "‚ùå –û—à–∏–±–∫–∞")
            self.status_label.setStyleSheet("color: #f44336; font-size: 10px; font-weight: bold;")

        self.status_label.setVisible(True)

    def reset_status(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        self.progress_bar.setVisible(False)
        self.status_label.setVisible(False)


class FileListWidget(QWidget):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–∫–µ—Ç–æ–º"""

    files_changed = Signal(int)

    def __init__(self):
        super().__init__()
        self.file_items: Dict[Path, FileListItem] = {}
        self.setup_ui()

    def setup_ui(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(8)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        header_layout.setSpacing(8)

        self.title_label = QLabel("üìÅ –§–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        self.title_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #333;
                padding: 8px;
                margin: 0px;
            }
        """)
        header_layout.addWidget(self.title_label)

        header_layout.addStretch()

        # –°—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
        self.count_label = QLabel("0 —Ñ–∞–π–ª–æ–≤")
        self.count_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                color: #666;
                padding: 8px;
                margin: 0px;
            }
        """)
        header_layout.addWidget(self.count_label)

        layout.addLayout(header_layout)

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        self.list_widget = QListWidget()
        self.list_widget.setStyleSheet("""
            QListWidget {
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                background: #fafafa;
                padding: 4px;
            }
            QListWidget::item {
                border: none;
                padding: 0px;
                margin: 2px;
                background: transparent;
            }
            QListWidget::item:selected {
                background: transparent;
                border: none;
            }
            QListWidget::item:hover {
                background: transparent;
            }
        """)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        self.list_widget.setSelectionMode(QListWidget.NoSelection)
        self.list_widget.setFocusPolicy(Qt.NoFocus)

        layout.addWidget(self.list_widget)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(8)

        self.select_all_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        self.select_all_btn.setStyleSheet("""
            QPushButton {
                padding: 6px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
                color: #333;
            }
            QPushButton:hover {
                background: #f5f5f5;
                border-color: #bbb;
            }
        """)
        self.select_all_btn.clicked.connect(self.select_all_files)
        buttons_layout.addWidget(self.select_all_btn)

        self.clear_all_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        self.clear_all_btn.setStyleSheet("""
            QPushButton {
                padding: 6px 12px;
                border: 1px solid #ddd;
                border-radius: 4px;
                background: white;
                color: #333;
            }
            QPushButton:hover {
                background: #f5f5f5;
                border-color: #bbb;
            }
        """)
        self.clear_all_btn.clicked.connect(self.clear_all_files)
        buttons_layout.addWidget(self.clear_all_btn)

        buttons_layout.addStretch()

        layout.addLayout(buttons_layout)

    def update_files(self, filepaths: List[Path]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç
        current_paths = set(self.file_items.keys())
        new_paths = set(filepaths)

        for path in current_paths - new_paths:
            self.remove_file(path)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        for path in new_paths - current_paths:
            self.add_file(path)

        self.update_count()

    def add_file(self, filepath: Path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫"""
        if filepath in self.file_items:
            return

        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è —Ñ–∞–π–ª–∞
        file_item = FileListItem(filepath)
        file_item.remove_requested.connect(self.remove_file)

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        list_item = QListWidgetItem()

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        item_size = file_item.sizeHint()
        item_size.setHeight(max(85, item_size.height()))  # –ú–∏–Ω–∏–º—É–º 85px –≤—ã—Å–æ—Ç—ã
        list_item.setSizeHint(item_size)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        self.list_widget.addItem(list_item)
        self.list_widget.setItemWidget(list_item, file_item)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        self.file_items[filepath] = file_item

        self.update_count()

    def remove_file(self, filepath: Path):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if filepath not in self.file_items:
            return

        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        for i in range(self.list_widget.count()):
            item = self.list_widget.item(i)
            widget = self.list_widget.itemWidget(item)
            if isinstance(widget, FileListItem) and widget.filepath == filepath:
                self.list_widget.takeItem(i)
                break

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        del self.file_items[filepath]

        self.update_count()

    def clear(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫"""
        self.list_widget.clear()
        self.file_items.clear()
        self.update_count()

    def clear_all_files(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã"""
        self.clear()

    def select_all_files(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)"""
        pass

    def update_count(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤"""
        count = len(self.file_items)
        if count == 0:
            self.count_label.setText("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤")
        elif count == 1:
            self.count_label.setText("1 —Ñ–∞–π–ª")
        elif count < 5:
            self.count_label.setText(f"{count} —Ñ–∞–π–ª–∞")
        else:
            self.count_label.setText(f"{count} —Ñ–∞–π–ª–æ–≤")

        self.files_changed.emit(count)

    def get_file_item(self, filepath: Path) -> FileListItem:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Ñ–∞–π–ª–∞"""
        return self.file_items.get(filepath)

    def set_file_progress(self, filepath: Path, progress: int, message: str = ""):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ñ–∞–π–ª–∞"""
        file_item = self.get_file_item(filepath)
        if file_item:
            file_item.set_conversion_progress(progress, message)

    def set_file_completed(self, filepath: Path, success: bool, message: str = ""):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"""
        file_item = self.get_file_item(filepath)
        if file_item:
            file_item.set_conversion_completed(success, message)

    def reset_all_status(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        for file_item in self.file_items.values():
            file_item.reset_status()