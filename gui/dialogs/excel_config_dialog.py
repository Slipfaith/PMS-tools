# gui/dialogs/excel_config_dialog.py

from PySide6.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QTabWidget, QGroupBox,
    QLabel, QLineEdit, QCheckBox, QPushButton, QTableWidget,
    QTableWidgetItem, QHeaderView, QFormLayout, QMessageBox,
    QComboBox, QWidget, QDialog
)
from PySide6.QtCore import Qt
from typing import Dict
import logging

from core.base import ExcelAnalysis, ExcelConversionSettings, ColumnType, ColumnInfo

logger = logging.getLogger(__name__)


class ExcelConfigDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel ‚Üí TMX"""

    def __init__(self, excel_analysis: ExcelAnalysis, parent=None):
        super().__init__(parent)
        self.analysis = excel_analysis
        self.settings = None
        self.setup_ui()
        self.populate_data()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Excel ‚Üí TMX: {self.analysis.file_path.name}")
        self.setMinimumSize(1000, 700)
        self.resize(1200, 800)

        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞")
        header.setStyleSheet("""
           QLabel {
               font-size: 18px;
               font-weight: bold;
               color: #333;
               margin: 10px 0;
               padding: 10px;
               background: #f0f8ff;
               border-radius: 8px;
               border: 1px solid #ddd;
           }
       """)
        layout.addWidget(header)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        main_settings = self.create_main_settings()
        layout.addWidget(main_settings)

        # –¢–∞–±—ã –¥–ª—è –ª–∏—Å—Ç–æ–≤ Excel
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
           QTabWidget::pane {
               border: 1px solid #ddd;
               border-radius: 8px;
               background: white;
           }
           QTabBar::tab {
               padding: 8px 16px;
               margin-right: 2px;
               background: #f5f5f5;
               border: 1px solid #ddd;
               border-bottom: none;
               border-radius: 8px 8px 0 0;
           }
           QTabBar::tab:selected {
               background: white;
               border-bottom: 1px solid white;
           }
       """)
        layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(10)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ
        self.info_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–æ–Ω–∫–∏")
        self.info_label.setStyleSheet("color: #666; font-style: italic;")
        buttons_layout.addWidget(self.info_label)

        buttons_layout.addStretch()

        cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∞")
        cancel_btn.setStyleSheet("""
           QPushButton {
               padding: 10px 20px;
               border: 1px solid #ddd;
               border-radius: 5px;
               background: #f5f5f5;
               font-size: 14px;
           }
           QPushButton:hover {
               background: #e5e5e5;
               border-color: #bbb;
           }
       """)
        cancel_btn.clicked.connect(self.reject)
        buttons_layout.addWidget(cancel_btn)

        self.convert_btn = QPushButton("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.convert_btn.setStyleSheet("""
           QPushButton {
               background: #4CAF50;
               color: white;
               padding: 10px 30px;
               border: none;
               border-radius: 5px;
               font-weight: bold;
               font-size: 14px;
           }
           QPushButton:hover {
               background: #45a049;
           }
           QPushButton:pressed {
               background: #3d8b40;
           }
       """)
        self.convert_btn.clicked.connect(self.accept_conversion)
        buttons_layout.addWidget(self.convert_btn)

        layout.addLayout(buttons_layout)

    def create_main_settings(self) -> QGroupBox:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        group = QGroupBox("üåê –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        group.setStyleSheet("""
           QGroupBox {
               font-weight: bold;
               font-size: 14px;
               margin-top: 10px;
               padding-top: 10px;
               border: 2px solid #ddd;
               border-radius: 8px;
           }
           QGroupBox::title {
               subcontrol-origin: margin;
               left: 10px;
               padding: 0 10px 0 10px;
               background: white;
           }
       """)

        layout = QFormLayout(group)
        layout.setSpacing(15)

        # –Ø–∑—ã–∫–∏ - –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.source_lang_edit = QLineEdit("ru-RU")
        self.source_lang_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: ru-RU, en-US, de-DE")
        self.source_lang_edit.setStyleSheet("""
           QLineEdit {
               padding: 8px;
               border: 1px solid #ddd;
               border-radius: 4px;
               font-size: 13px;
           }
           QLineEdit:focus {
               border-color: #4CAF50;
           }
       """)
        layout.addRow("üì• –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫:", self.source_lang_edit)

        self.target_lang_edit = QLineEdit("en-US")
        self.target_lang_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: en-US, ru-RU, fr-FR")
        self.target_lang_edit.setStyleSheet(self.source_lang_edit.styleSheet())
        layout.addRow("üì§ –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫:", self.target_lang_edit)

        # –û–ø—Ü–∏–∏
        options_layout = QVBoxLayout()

        self.include_comments_cb = QCheckBox("üí¨ –í–∫–ª—é—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ TMX")
        self.include_comments_cb.setChecked(True)
        self.include_comments_cb.setStyleSheet("font-weight: normal; margin: 5px;")
        options_layout.addWidget(self.include_comments_cb)

        self.include_context_cb = QCheckBox("üìù –í–∫–ª—é—á–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ TMX")
        self.include_context_cb.setChecked(True)
        self.include_context_cb.setStyleSheet("font-weight: normal; margin: 5px;")
        options_layout.addWidget(self.include_context_cb)

        self.skip_empty_cb = QCheckBox("üö´ –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã")
        self.skip_empty_cb.setChecked(True)
        self.skip_empty_cb.setStyleSheet("font-weight: normal; margin: 5px;")
        options_layout.addWidget(self.skip_empty_cb)

        layout.addRow("‚öôÔ∏è –û–ø—Ü–∏–∏:", options_layout)

        return group

    def populate_data(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞"""
        for sheet_info in self.analysis.sheets:
            if sheet_info.data_rows > 0:  # –¢–æ–ª—å–∫–æ –ª–∏—Å—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                sheet_widget = ExcelSheetWidget(sheet_info)
                tab_title = f"{sheet_info.name} ({sheet_info.data_rows} —Å—Ç—Ä–æ–∫)"
                self.tabs.addTab(sheet_widget, tab_title)

        if self.tabs.count() == 0:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
            empty_widget = QLabel("‚ùå –í Excel —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")
            empty_widget.setAlignment(Qt.AlignCenter)
            empty_widget.setStyleSheet("color: #999; font-size: 16px; margin: 50px;")
            self.tabs.addTab(empty_widget, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            self.convert_btn.setEnabled(False)

    def accept_conversion(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏
            source_lang = self.source_lang_edit.text().strip()
            target_lang = self.target_lang_edit.text().strip()

            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if not source_lang or not target_lang:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    "–£–∫–∞–∂–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏!\n\n"
                                    "–ü—Ä–∏–º–µ—Ä—ã: ru-RU, en-US, de-DE, fr-FR")
                return

            if source_lang == target_lang:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    "–ò—Å—Ö–æ–¥–Ω—ã–π –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏!")
                return

            # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–æ–≤
            selected_sheets = []
            column_mappings = {}

            valid_sheets = 0
            for i in range(self.tabs.count()):
                sheet_widget = self.tabs.widget(i)

                if not isinstance(sheet_widget, ExcelSheetWidget):
                    continue

                if sheet_widget.is_sheet_selected():
                    sheet_name = sheet_widget.sheet_info.name
                    selected_sheets.append(sheet_name)

                    # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫
                    column_mapping = sheet_widget.get_column_mapping()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    text_columns = [col for col in column_mapping.values()
                                    if col.final_type == ColumnType.TEXT]

                    if len(text_columns) >= 2:
                        column_mappings[sheet_name] = column_mapping
                        valid_sheets += 1
                    else:
                        QMessageBox.warning(
                            self, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                            f"–õ–∏—Å—Ç '{sheet_name}': –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ "
                            f"–¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–æ–≤!\n\n"
                            f"–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: {len(text_columns)}"
                        )
                        return

            if valid_sheets == 0:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ª–∏—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏!\n\n"
                                    "–ö–∞–∂–¥—ã–π –ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            self.settings = ExcelConversionSettings(
                source_language=source_lang,
                target_language=target_lang,
                include_comments=self.include_comments_cb.isChecked(),
                include_context=self.include_context_cb.isChecked(),
                skip_empty_segments=self.skip_empty_cb.isChecked(),
                selected_sheets=selected_sheets,
                column_mappings=column_mappings
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            self.info_label.setText(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {valid_sheets} –ª–∏—Å—Ç–æ–≤")

            logger.info(f"Excel conversion settings created: {valid_sheets} sheets, "
                        f"{source_lang} ‚Üí {target_lang}")

            self.accept()

        except Exception as e:
            logger.exception(f"Error in accept_conversion: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞",
                                 f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n{e}")

    def get_settings(self) -> ExcelConversionSettings:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        return self.settings


class ExcelSheetWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ Excel"""

    def __init__(self, sheet_info):
        super().__init__()
        self.sheet_info = sheet_info
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ª–∏—Å—Ç–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        layout.setSpacing(10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞
        header_layout = QHBoxLayout()

        self.include_sheet_cb = QCheckBox(f"üìã –í–∫–ª—é—á–∏—Ç—å –ª–∏—Å—Ç '{self.sheet_info.name}' –≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
        self.include_sheet_cb.setChecked(True)
        self.include_sheet_cb.setStyleSheet("""
           QCheckBox {
               font-weight: bold;
               font-size: 14px;
               margin: 5px;
               color: #333;
           }
           QCheckBox::indicator {
               width: 18px;
               height: 18px;
           }
       """)
        self.include_sheet_cb.toggled.connect(self.on_sheet_toggle)
        header_layout.addWidget(self.include_sheet_cb)

        header_layout.addStretch()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–µ
        info_label = QLabel(f"üìä –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {self.sheet_info.data_rows} | "
                            f"üìã –ö–æ–ª–æ–Ω–æ–∫: {len(self.sheet_info.columns)}")
        info_label.setStyleSheet("""
           QLabel {
               color: #666;
               font-size: 12px;
               margin: 5px;
               padding: 5px 10px;
               background: #f9f9f9;
               border-radius: 4px;
           }
       """)
        header_layout.addWidget(info_label)

        layout.addLayout(header_layout)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = QLabel(
            "üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–æ–Ω–∫–∏: –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ —è–∑—ã–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏. "
            "–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏."
        )
        instruction.setStyleSheet("""
           QLabel {
               color: #555;
               font-size: 11px;
               margin: 5px;
               padding: 8px;
               background: #fff8dc;
               border-left: 4px solid #ffa500;
               border-radius: 4px;
           }
       """)
        instruction.setWordWrap(True)
        layout.addWidget(instruction)

        # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels([
            "üìã –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏", "üîß –¢–∏–ø", "üåê –Ø–∑—ã–∫", "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # –¢–∏–ø –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # –Ø–∑—ã–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # –ß–µ–∫–±–æ–∫—Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π

        # –°—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã
        self.table.setStyleSheet("""
           QTableWidget {
               gridline-color: #e0e0e0;
               border: 1px solid #ddd;
               border-radius: 4px;
               background: white;
           }
           QTableWidget::item {
               padding: 8px;
               border: none;
           }
           QTableWidget::item:selected {
               background: #e3f2fd;
           }
           QHeaderView::section {
               background: #f5f5f5;
               padding: 8px;
               border: none;
               border-right: 1px solid #ddd;
               font-weight: bold;
           }
       """)

        self.populate_table()
        layout.addWidget(self.table)

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        quick_setup_layout = QHBoxLayout()

        auto_btn = QPushButton("üéØ –ê–≤—Ç–æ-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        auto_btn.setToolTip("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        auto_btn.clicked.connect(self.auto_setup_columns)
        auto_btn.setStyleSheet("""
           QPushButton {
               padding: 6px 12px;
               border: 1px solid #4CAF50;
               border-radius: 4px;
               background: #f0fff0;
               color: #2e7d32;
               font-size: 12px;
           }
           QPushButton:hover {
               background: #e8f5e8;
           }
       """)
        quick_setup_layout.addWidget(auto_btn)

        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.setToolTip("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫")
        clear_btn.clicked.connect(self.clear_column_settings)
        clear_btn.setStyleSheet("""
           QPushButton {
               padding: 6px 12px;
               border: 1px solid #f44336;
               border-radius: 4px;
               background: #fff5f5;
               color: #c62828;
               font-size: 12px;
           }
           QPushButton:hover {
               background: #ffebee;
           }
       """)
        quick_setup_layout.addWidget(clear_btn)

        quick_setup_layout.addStretch()
        layout.addLayout(quick_setup_layout)

    def populate_table(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–æ–ª–æ–Ω–æ–∫"""
        self.table.setRowCount(len(self.sheet_info.columns))

        for row, col_info in enumerate(self.sheet_info.columns):
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
            name_item = QTableWidgetItem(col_info.name)
            name_item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable)
            name_item.setToolTip(f"–ö–æ–ª–æ–Ω–∫–∞ {col_info.index + 1}: {col_info.name}")
            self.table.setItem(row, 0, name_item)

            # –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏
            type_combo = QComboBox()
            type_combo.addItems([
                "–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                "–ö–æ–Ω—Ç–µ–∫—Å—Ç",
                "ID/–ù–æ–º–µ—Ä",
                "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å"
            ])
            type_combo.setCurrentText("–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            type_combo.setStyleSheet("""
               QComboBox {
                   padding: 4px;
                   border: 1px solid #ddd;
                   border-radius: 3px;
               }
           """)
            self.table.setCellWidget(row, 1, type_combo)

            # –Ø–∑—ã–∫ - –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            lang_edit = QLineEdit()
            lang_edit.setPlaceholderText("ru-RU, en-US, etc.")
            lang_edit.setStyleSheet("""
               QLineEdit {
                   padding: 4px;
                   border: 1px solid #ddd;
                   border-radius: 3px;
                   font-size: 11px;
               }
               QLineEdit:focus {
                   border-color: #4CAF50;
               }
           """)
            self.table.setCellWidget(row, 2, lang_edit)

            # –í–∫–ª—é—á–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É
            include_cb = QCheckBox()
            include_cb.setChecked(True)
            include_cb.setStyleSheet("margin: 5px;")
            self.table.setCellWidget(row, 3, include_cb)

    def on_sheet_toggle(self, checked):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞"""
        self.table.setEnabled(checked)

    def auto_setup_columns(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫"""
        text_count = 0

        for row in range(self.table.rowCount()):
            if text_count < 2:
                # –ü–µ—Ä–≤—ã–µ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ - —Ç–µ–∫—Å—Ç
                type_combo = self.table.cellWidget(row, 1)
                type_combo.setCurrentText("–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")

                lang_edit = self.table.cellWidget(row, 2)
                if text_count == 0:
                    lang_edit.setText("ru-RU")
                else:
                    lang_edit.setText("en-US")

                include_cb = self.table.cellWidget(row, 3)
                include_cb.setChecked(True)

                text_count += 1
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                type_combo = self.table.cellWidget(row, 1)
                type_combo.setCurrentText("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å")

                include_cb = self.table.cellWidget(row, 3)
                include_cb.setChecked(False)

    def clear_column_settings(self):
        """–û—á–∏—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫"""
        for row in range(self.table.rowCount()):
            type_combo = self.table.cellWidget(row, 1)
            type_combo.setCurrentText("–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")

            lang_edit = self.table.cellWidget(row, 2)
            lang_edit.clear()

            include_cb = self.table.cellWidget(row, 3)
            include_cb.setChecked(True)

    def is_sheet_selected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–Ω –ª–∏ –ª–∏—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        return self.include_sheet_cb.isChecked()

    def get_column_mapping(self) -> Dict[int, ColumnInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫"""
        if not self.is_sheet_selected():
            return {}

        mapping = {}

        for row in range(self.table.rowCount()):
            include_cb = self.table.cellWidget(row, 3)
            if not include_cb.isChecked():
                continue

            type_combo = self.table.cellWidget(row, 1)
            lang_edit = self.table.cellWidget(row, 2)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏
            type_text = type_combo.currentText()
            if type_text == "–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞":
                col_type = ColumnType.TEXT
            elif type_text == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
                col_type = ColumnType.COMMENT
            elif type_text == "–ö–æ–Ω—Ç–µ–∫—Å—Ç":
                col_type = ColumnType.CONTEXT
            elif type_text == "ID/–ù–æ–º–µ—Ä":
                col_type = ColumnType.ID
            else:  # "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å"
                col_type = ColumnType.IGNORE

            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
            user_lang = lang_edit.text().strip() or None

            # –°–æ–∑–¥–∞–µ–º ColumnInfo –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            original_col = self.sheet_info.columns[row]
            col_info = ColumnInfo(
                index=original_col.index,
                name=original_col.name,
                detected_language=original_col.detected_language,
                column_type=original_col.column_type,
                user_language=user_lang,
                user_type=col_type
            )

            mapping[original_col.index] = col_info

        return mapping